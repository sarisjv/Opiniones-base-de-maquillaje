import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import nltk
from nltk.corpus import stopwords
from collections import Counter
from transformers import pipeline
import torch

# Configuraci√≥n inicial
st.set_page_config(page_title="An√°lisis de Comentarios", layout="wide")
st.title("üìä An√°lisis de Comentarios")

# Descargar recursos de NLTK
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

# Cargar modelos de an√°lisis de sentimiento y resumen (usaremos CPU para Render)
@st.cache_resource
def load_models():
    try:
        sentiment_analyzer = pipeline("sentiment-analysis", 
                                    model="nlptown/bert-base-multilingual-uncased-sentiment",
                                    device="cpu")
        
        summarizer = pipeline("summarization", 
                             model="facebook/bart-large-cnn",
                             device="cpu")
        return sentiment_analyzer, summarizer
    except Exception as e:
        st.error(f"Error cargando modelos: {e}")
        return None, None

sentiment_analyzer, summarizer = load_models()

# Datos de las 20 opiniones
opiniones = [
    "Un s√©rum magn√≠fico, deja la piel espectacular con un acabado natural, el tono est√° muy bien.",
    "Este producto es maravilloso, minimiza imperfecciones con una sola aplicaci√≥n al d√≠a. 10/10.",
    "Es la mejor base si buscas una cobertura muy natural. No se nota que traes algo puesto.",
    "Excelente base buen cubrimiento.",
    "Mi piel es sensible y este producto es el mejor aliado del d√≠a a d√≠a, excelente cubrimiento.",
    "Excelente base buen cubrimiento.",
    "El empaque es terrible, no la volver√© a comprar porque no sirve el envase, el producto no sale por el aplicador, es fatal.",
    "S√≠ se siente una piel diferente despu√©s de usar el producto.",
    "Me gusta mucho c√≥mo deja mi piel, es buen producto aunque no me gusta su presentaci√≥n.",
    "Me parece buena, pero pienso que huele mucho a alcohol, no s√© si es normal.",
    "Creo que fue el color que no lo supe elegir, no est√° mal, pero me imaginaba algo m√°s.",
    "La base de maquillaje ofrece un acabado mate y aterciopelado que deja la piel lisa.",
    "La base de maquillaje ofrece un acabado muy lindo y natural.",
    "Muy buen producto, solo que dura poco tiempo, por ah√≠ unas 5 horas.",
    "Excelente cobertura y precio.",
    "No es para nada grasosa.",
    "El producto es mucho m√°s oscuro de lo que aparece en la referencia.",
    "Pens√© me sentar√≠a mejor el n√∫mero 8, es muy buena pero noto que toca como poner dos veces.",
    "No me gust√≥ su cobertura.",
    "La sensaci√≥n en la piel no me gusta, me arde al aplicarla."
]

# Funci√≥n para an√°lisis de sentimiento mejorado
def analizar_sentimiento(texto):
    if not sentiment_analyzer:
        return "Modelo no disponible", 0
    
    try:
        resultado = sentiment_analyzer(texto)[0]
        etiqueta = resultado['label']
        puntuacion = resultado['score']
        
        # Convertir etiqueta num√©rica a texto
        if '1 star' in etiqueta or '2 stars' in etiqueta:
            return "Negativo", puntuacion
        elif '3 stars' in etiqueta:
            return "Neutral", puntuacion
        else:
            return "Positivo", puntuacion
    except:
        return "Error en an√°lisis", 0

# Funci√≥n para generar resumen
def generar_resumen(texto):
    if not summarizer:
        return "Modelo de resumen no disponible"
    
    try:
        resumen = summarizer(texto, max_length=130, min_length=30, do_sample=False)
        return resumen[0]['summary_text']
    except Exception as e:
        return f"No se pudo generar resumen: {str(e)}"

# Funci√≥n para extraer temas principales
def extraer_temas(textos, n_palabras=5):
    todas_palabras = ' '.join(textos).lower()
    palabras = [p for p in nltk.word_tokenize(todas_palabras) 
               if p.isalpha() and p not in stopwords.words('spanish') and len(p) > 2]
    
    # Filtrar palabras comunes no √∫tiles
    palabras_comunes = ['producto', 'base', 'maquillaje', 'piel', 'buen', 'bueno']
    palabras = [p for p in palabras if p not in palabras_comunes]
    
    frecuentes = Counter(palabras).most_common(n_palabras)
    return [palabra[0] for palabra in frecuentes]

# Interfaz principal
def main():
    st.sidebar.title("Opciones")
    opcion = st.sidebar.radio("Seleccione una opci√≥n:", 
                             ["Analizar nuevo comentario", "Explorar comentarios existentes"])
    
    if opcion == "Analizar nuevo comentario":
        st.header("üìù Analizar nuevo comentario")
        
        comentario = st.text_area("Escribe tu comentario aqu√≠:", height=150)
        
        if st.button("Analizar"):
            if comentario.strip():
                with st.spinner("Analizando..."):
                    # An√°lisis de sentimiento
                    sentimiento, puntuacion = analizar_sentimiento(comentario)
                    
                    # Generar resumen
                    resumen = generar_resumen(comentario)
                    
                    # Mostrar resultados
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("An√°lisis de Sentimiento")
                        st.write(f"**Tipo:** {sentimiento}")
                        st.write(f"**Confianza:** {puntuacion:.2f}")
                        
                        # Visualizaci√≥n simple
                        if sentimiento == "Positivo":
                            st.success("‚úÖ Comentario positivo")
                        elif sentimiento == "Negativo":
                            st.error("‚ùå Comentario negativo")
                        else:
                            st.info("‚ûñ Comentario neutral")
                    
                    with col2:
                        st.subheader("Resumen autom√°tico")
                        st.write(resumen)
            else:
                st.warning("Por favor escribe un comentario para analizar")
    
    else:  # Explorar comentarios existentes
        st.header("üìÇ Explorar comentarios existentes")
        
        df = pd.DataFrame({'Opini√≥n': opiniones})
        df['An√°lisis'] = df['Opini√≥n'].apply(lambda x: analizar_sentimiento(x)[0])
        df['Puntuaci√≥n'] = df['Opini√≥n'].apply(lambda x: analizar_sentimiento(x)[1])
        
        opcion_existente = st.radio("Qu√© deseas hacer con los comentarios existentes?",
                                  ["Ver tabla completa", 
                                   "Obtener resumen general",
                                   "Analizar temas principales"])
        
        if opcion_existente == "Ver tabla completa":
            st.subheader("Tabla de Comentarios")
            st.dataframe(df)
            
        elif opcion_existente == "Obtener resumen general":
            with st.spinner("Generando resumen de todos los comentarios..."):
                todos_comentarios = " ".join(opiniones)
                resumen_general = generar_resumen(todos_comentarios)
                
                st.subheader("Resumen General")
                st.write(resumen_general)
                
                # Estad√≠sticas
                st.subheader("Estad√≠sticas")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total comentarios", len(opiniones))
                with col2:
                    positivos = df[df['An√°lisis'] == "Positivo"].shape[0]
                    st.metric("Comentarios positivos", positivos)
                with col3:
                    negativos = df[df['An√°lisis'] == "Negativo"].shape[0]
                    st.metric("Comentarios negativos", negativos)
                
        else:  # Analizar temas principales
            st.subheader("Temas principales en los comentarios")
            
            # Opci√≥n para filtrar por tipo de comentario
            filtro = st.selectbox("Filtrar por tipo de comentario:", 
                                ["Todos", "Positivos", "Negativos", "Neutrales"])
            
            if filtro == "Todos":
                textos = opiniones
            else:
                textos = df[df['An√°lisis'] == filtro[:-1]]['Opini√≥n'].tolist()
            
            temas = extraer_temas(textos)
            
            st.write("**Palabras clave m√°s frecuentes:**")
            for i, tema in enumerate(temas, 1):
                st.write(f"{i}. {tema.capitalize()}")
            
            # Wordcloud
            st.subheader("Nube de palabras")
            todas_palabras = ' '.join(textos)
            wordcloud = WordCloud(width=800, height=400, background_color='white').generate(todas_palabras)
            
            plt.figure(figsize=(10, 5))
            plt.imshow(wordcloud, interpolation='bilinear')
            plt.axis("off")
            st.pyplot(plt)

if __name__ == "__main__":
    main()
