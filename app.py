import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import nltk
from nltk.corpus import stopwords
from collections import Counter
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
import re
import gc

# Configuraci√≥n inicial
st.set_page_config(
    page_title="An√°lisis Completo de Opiniones",
    layout="wide",
    menu_items={
        'Get Help': 'https://github.com/tu-usuario/tu-repo',
        'About': "App de an√°lisis de opiniones con m√∫ltiples funcionalidades"
    }
)

# Descargar recursos de NLTK
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

# Datos y modelo Naive Bayes
comentarios = [
    "Me encanta este producto, es econ√≥mico",
    "No me gusta, me reseca mucho la piel",
    "Es un producto m√°s, no est√° mal",
    "Excelente calidad y precio",
    "Horrible, me irrita la piel",
    "No tengo opini√≥n",
    "No lo volver√≠a a comprar",
    "Lo amo, me deja la piel suave",
    "P√©simo, me ardi√≥ la cara",
    "Muy bueno, huele delicioso",
    "No me hizo efecto",
    "Es neutral para m√≠",
    "Fant√°stico, super recomendado",
    "Decepcionante, esperaba m√°s",
    "No me gust√≥ para nada",
    "Lo recomiendo totalmente",
    "Es aceptable, nada especial",
    "Una maravilla de producto",
    "Es malo, me brot√≥ la piel",
    "Me agrada, pero no es el mejor"
]

etiquetas = [
    "positivo", "negativo", "neutral", "positivo", "negativo", "neutral",
    "negativo", "positivo", "negativo", "positivo", "neutral", "neutral",
    "positivo", "negativo", "negativo", "positivo", "neutral", "positivo",
    "negativo", "neutral"
]

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(comentarios)
modelo_nb = MultinomialNB()
modelo_nb.fit(X, etiquetas)

# Funci√≥n mejorada de an√°lisis de sentimiento
def analizar_sentimiento(texto):
    positivo = {
        'magn√≠fico': 3, 'espectacular': 3, 'maravilloso': 3, 'excelente': 3,
        'mejor': 2, 'recomiendo': 2, 'buen': 2, 'genial': 2, 'perfecto': 3,
        'bonita': 2, 'natural': 1, 'sana': 1, 'f√°cil': 1, 'calidad': 2,
        '10/10': 3, 'mejor aliado': 2, 'muy bien': 2, 'muy bueno': 2,
        'excelente cobertura': 3, 'no es grasosa': 1, 'diferente': 1
    }

    negativo = {
        'terrible': 3, 'fatal': 3, 'no sirve': 3, 'no me gusta': 2,
        'arde': 3, 'problema': 2, 'decepcionante': 3, 'pasteluda': 2,
        'oscuro': 1, 'alcohol': 1, 'duro': 1, 'no volver√©': 3,
        'no sale': 2, 'no gust√≥': 2, 'no gusta': 2,
        'pens√© que ser√≠a mejor': 2, 'queda pasteluda': 2, 'irrita': 2, 'problemas': 2
    }

    expresiones_negativas = [
        r'no la volver[√©|e] a comprar',
        r'no me gust[o√≥]',
        r'no me gusta',
        r'es mucho m√°s oscuro',
        r'queda la piel pasteluda',
        r'me arde al aplicarla',
        r'no sirve el envase',
        r'problema con el producto'
    ]

    texto = texto.lower()
    score = 0

    for expr in expresiones_negativas:
        if re.search(expr, texto):
            score -= 3

    for palabra, valor in positivo.items():
        if palabra in texto:
            score += valor

    for palabra, valor in negativo.items():
        if palabra in texto:
            score -= valor

    if score >= 3:
        return "Positivo", score
    elif score <= -2:
        return "Negativo", abs(score)
    else:
        return "Neutral", 0

# Funci√≥n de resumen
def generar_resumen(texto):
    oraciones = nltk.sent_tokenize(texto)
    if len(oraciones) > 1:
        return oraciones[0] + " [...] " + oraciones[-1]
    return texto

# Funci√≥n para extraer palabras clave
def palabras_clave(textos, n=10):
    palabras_comunes = {'producto', 'base', 'maquillaje', 'piel', 'buen', 'como', 'que', 'con', 'para'}
    palabras = []

    for texto in textos:
        tokens = [p.lower() for p in nltk.word_tokenize(texto)
                  if p.isalpha() and p not in stopwords.words('spanish')
                  and p.lower() not in palabras_comunes]
        palabras.extend(tokens)

    return Counter(palabras).most_common(n)

# Interfaz
def main():
    st.title("üí¨ An√°lisis Completo de Opiniones de Productos Cosm√©ticos")

    tab_nb, tab_avanzado = st.tabs(["An√°lisis r√°pido", "An√°lisis avanzado y exploraci√≥n"])

    with tab_nb:
        st.header("An√°lisis r√°pido")
        comentario_usuario = st.text_area("Escribe tu comentario aqu√≠:")
        if st.button("Analizar Sentimiento"):
            if comentario_usuario.strip() == "":
                st.warning("Por favor escribe un comentario antes de analizar.")
            else:
                comentario_vectorizado = vectorizer.transform([comentario_usuario])
                prediccion = modelo_nb.predict(comentario_vectorizado)[0]
                st.success(f"Sentimiento detectado: **{prediccion.upper()}**")

                proba = modelo_nb.predict_proba(comentario_vectorizado)[0]
                for etiqueta, prob in zip(modelo_nb.classes_, proba):
                    st.write(f"{etiqueta.capitalize()}: {prob:.2f}")

    with tab_avanzado:
        st.header("An√°lisis avanzado de opiniones y exploraci√≥n de datos")

        subtab1, subtab2 = st.tabs(["Analizar nuevo comentario", "Explorar opiniones existentes"])

        with subtab1:
            comentario = st.text_area("Escribe tu opini√≥n sobre el producto:", height=150)
            if st.button("Analizar Sentimiento (Avanzado)"):
                if comentario.strip():
                    with st.spinner("Analizando..."):
                        sentimiento, puntaje = analizar_sentimiento(comentario)
                        col1, col2 = st.columns(2)
                        with col1:
                            st.subheader("Resultado del An√°lisis")
                            if sentimiento == "Positivo":
                                st.success(f"‚úÖ {sentimiento} (Puntaje: {puntaje})")
                            elif sentimiento == "Negativo":
                                st.error(f"‚ùå {sentimiento} (Puntaje: {puntaje})")
                            else:
                                st.info(f"‚ûñ {sentimiento} (Puntaje: {puntaje})")

        with subtab2:
            st.subheader("Opiniones existentes")
            opiniones = [
                "Un s√©rum magn√≠fico, deja la piel espectacular con un acabado natural, el tono est√° muy bien.",
                "Este producto es maravilloso, minimiza imperfecciones con una sola aplicaci√≥n al d√≠a. 10/10.",
                "El empaque es terrible, no la volver√© a comprar porque no sirve el envase.",
                "Me gusta mucho c√≥mo deja mi piel, es buen producto aunque no me gusta su presentaci√≥n.",
                "No me gust√≥ su cobertura.",
                "La sensaci√≥n en la piel no me gusta, me arde al aplicarla.",
                "Excelente cobertura y precio.",
                "Muy buen producto, solo que dura poco tiempo.",
                "Es la mejor base si buscas una cobertura muy natural.",
                "Pens√© me sentar√≠a mejor el n√∫mero 8, es buena pero queda la piel pasteluda."
            ]

            for i, op in enumerate(opiniones, 1):
                sentimiento, puntaje = analizar_sentimiento(op)
                st.markdown(f"**Opini√≥n {i}:** {op}")
                st.write(f"‚û°Ô∏è Resultado: **{sentimiento}** (Puntaje: {puntaje})")
                st.divider()

if __name__ == "__main__":
    main()
