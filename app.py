import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import nltk
from nltk.corpus import stopwords
from collections import Counter

# Configuraci칩n inicial
st.set_page_config(page_title="An치lisis Completo de Opiniones", layout="wide")
st.title("游늵 An치lisis de 20 Opiniones de Clientes")

# Descargar recursos de NLTK
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

# Datos de las 20 opiniones
opiniones = [
    "Un s칠rum magn칤fico, deja la piel espectacular con un acabado natural, el tono est치 muy bien.",
    "Este producto es maravilloso, minimiza imperfecciones con una sola aplicaci칩n al d칤a. 10/10.",
    "Es la mejor base si buscas una cobertura muy natural. No se nota que traes algo puesto.",
    "Excelente base buen cubrimiento.",
    "Mi piel es sensible y este producto es el mejor aliado del d칤a a d칤a, excelente cubrimiento.",
    "Excelente base buen cubrimiento.",
    "El empaque es terrible, no la volver칠 a comprar porque no sirve el envase, el producto no sale por el aplicador, es fatal.",
    "S칤 se siente una piel diferente despu칠s de usar el producto.",
    "Me gusta mucho c칩mo deja mi piel, es buen producto aunque no me gusta su presentaci칩n.",
    "Me parece buena, pero pienso que huele mucho a alcohol, no s칠 si es normal.",
    "Creo que fue el color que no lo supe elegir, no est치 mal, pero me imaginaba algo m치s.",
    "La base de maquillaje ofrece un acabado mate y aterciopelado que deja la piel lisa.",
    "La base de maquillaje ofrece un acabado muy lindo y natural.",
    "Muy buen producto, solo que dura poco tiempo, por ah칤 unas 5 horas.",
    "Excelente cobertura y precio.",
    "No es para nada grasosa.",
    "El producto es mucho m치s oscuro de lo que aparece en la referencia.",
    "Pens칠 me sentar칤a mejor el n칰mero 8, es muy buena pero noto que toca como poner dos veces.",
    "No me gust칩 su cobertura.",
    "La sensaci칩n en la piel no me gusta, me arde al aplicarla."
]

# Funci칩n mejorada de an치lisis de sentimiento
def analizar_sentimiento(texto):
    texto = texto.lower()
    
    # Palabras clave para cada categor칤a
    positivo = ['magn칤fico', 'espectacular', 'maravilloso', 'excelente', 'mejor', 'buen', 'recomiendo', 'genial', 'perfecto']
    negativo = ['terrible', 'fatal', 'no sirve', 'no me gusta', 'arde', 'problema', 'decepcionante']
    neutral = ['normal', 'regular', 'aceptable', 'satisfactorio']
    
    # Contar ocurrencias
    pos = sum(texto.count(p) for p in positivo)
    neg = sum(texto.count(n) for n in negativo)
    neu = sum(texto.count(n) for n in neutral)
    
    # Determinar resultado
    if pos > neg and pos > neu:
        return "Positivo", pos
    elif neg > pos and neg > neu:
        return "Negativo", neg
    else:
        return "Neutral", neu

# Interfaz mejorada
def main():
    st.header("An치lisis Completo")
    
    # Convertir a DataFrame
    df = pd.DataFrame({'Opini칩n': opiniones})
    
    # Aplicar an치lisis a todas las opiniones
    df['An치lisis'] = df['Opini칩n'].apply(lambda x: analizar_sentimiento(x)[0])
    df['Puntaje'] = df['Opini칩n'].apply(lambda x: analizar_sentimiento(x)[1])
    
    # Mostrar todas las opiniones con su an치lisis
    st.subheader("Tabla Completa de Opiniones")
    st.dataframe(df)
    
    # Gr치ficos de an치lisis
    st.subheader("Visualizaciones")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribuci칩n de sentimientos
        st.write("**Distribuci칩n de Sentimientos**")
        distribucion = df['An치lisis'].value_counts()
        st.bar_chart(distribucion)
    
    with col2:
        # Palabras m치s frecuentes
        st.write("**Palabras Clave**")
        todas_palabras = ' '.join(opiniones).lower()
        palabras = [p for p in nltk.word_tokenize(todas_palabras) 
                   if p.isalpha() and p not in stopwords.words('spanish')]
        frecuentes = Counter(palabras).most_common(10)
        st.write(pd.DataFrame(frecuentes, columns=['Palabra', 'Frecuencia']))
    
    # Mostrar ejemplos de cada categor칤a
    st.subheader("Ejemplos por Categor칤a")
    
    for categoria in ["Positivo", "Neutral", "Negativo"]:
        st.write(f"**{categoria}:**")
        ejemplos = df[df['An치lisis'] == categoria]['Opini칩n'].head(3)
        for i, ejemplo in enumerate(ejemplos, 1):
            st.write(f"{i}. {ejemplo[:100]}...")

if __name__ == "__main__":
    main()    
